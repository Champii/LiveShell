// Generated by LiveScript 1.3.1
(function(){
  var blessed, Keyboard, Cursor, EventEmitter, Prompt, join$ = [].join, slice$ = [].slice;
  blessed = require('blessed');
  Keyboard = require('./Keyboard');
  Cursor = require('./Cursor');
  EventEmitter = require('events').EventEmitter;
  Prompt = (function(superclass){
    var prototype = extend$((import$(Prompt, superclass).displayName = 'Prompt', Prompt), superclass).prototype, constructor = Prompt;
    function Prompt(screen, main){
      this.screen = screen;
      this.main = main;
      this.Init();
    }
    prototype.Init = function(){
      var this$ = this;
      this.keyboad = new Keyboard(this.screen);
      this.cursor = new Cursor(this.screen, this);
      this.text = blessed.text({
        parent: this.main,
        top: 0,
        left: 0,
        content: ''
      });
      this.screen.on('keypress', function(key, obj){
        var ref$, x;
        switch (false) {
        case !((key != null && key.length) && 'ch' in obj):
          return this$.Append(obj.ch);
        case !((key != null && key.length) && ((ref$ = obj.name) != null ? ref$.length : void 8) === 1):
          return this$.Append(key);
        case obj.name !== 'space':
          return this$.Append(' ');
        case obj.name !== 'enter':
          return this$.emit('run', this$.Get());
        case obj.name !== 'backspace':
          x = this$.cursor.program.x;
          switch (false) {
          case x !== 1:
            return this$.Set(join$.call(slice$.call(this$.Get(), 1), ''));
          case !(x > 0):
            x--;
            return this$.Set(join$.call(slice$.call(this$.Get(), 0, x), '') + join$.call(slice$.call(this$.Get(), x + 1), ''));
          }
        }
      });
      return this.cursor.Init();
    };
    prototype.Set = function(it){
      this.text.setContent(it);
      return this.emit('changed', this.Get());
    };
    prototype.Append = function(it){
      var x;
      x = this.cursor.program.x;
      this.text.setContent(join$.call(slice$.call(this.Get(), 0, x), '') + it + join$.call(slice$.call(this.Get(), x), ''));
      return this.emit('changed', this.Get());
    };
    prototype.Get = function(){
      return this.text.getContent();
    };
    return Prompt;
  }(EventEmitter));
  module.exports = Prompt;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
