// Generated by LiveScript 1.3.1
(function(){
  var blessed, Prompt, Interpret, Output, __, preludeLs, fs, path, LiveShell;
  blessed = require('blessed');
  Prompt = require('./Prompt');
  Interpret = require('./Interpret');
  Output = require('./Output');
  __ = require('underscore');
  preludeLs = require('prelude-ls');
  fs = require('fs');
  path = require('path');
  import$(global, preludeLs);
  LiveShell = (function(){
    LiveShell.displayName = 'LiveShell';
    var prototype = LiveShell.prototype, constructor = LiveShell;
    function LiveShell(){
      this.ParseArgs();
    }
    prototype.ParseArgs = function(){
      this.args = drop(2)(
      process.argv);
      if (!this.args.length) {
        return this.Shell();
      }
      switch (this.args[0]) {
      case '--live':
        this.live = true;
        break;
      default:
        return this.Exec();
      }
      return this.Shell();
    };
    prototype.Shell = function(){
      var evaluate, this$ = this;
      this.screen = blessed.screen({
        smartCSR: true,
        cursor: {
          artificial: true,
          shape: 'block',
          color: null
        }
      });
      this.main = blessed.box({
        parent: this.screen,
        left: 0,
        top: 0,
        width: this.screen.width,
        height: this.screen.height
      });
      this.prompt = new Prompt(this.screen, this.main);
      this.interpret = new Interpret(this.screen, this.main);
      this.output = new Output(this.screen, this.main);
      evaluate = function(it){
        if (!it.length) {
          this$.output.Set();
        }
        return this$.interpret.Run(it, function(err, stdout){
          return this$.output.Set(err || stdout);
        });
      };
      if (this.live) {
        this.prompt.on('changed', __.throttle(evaluate, 1000));
      }
      this.prompt.on('run', evaluate);
      return this.screen.render();
    };
    prototype.Exec = function(){
      var this$ = this;
      this.interpret = new Interpret();
      return this.interpret.Exec(fs.readFileSync(path.resolve(__dirname, this.args[0])).toString(), function(err, stdout){
        if (err != null) {
          return console.error(err);
        }
        process.stdout.write(stdout);
        return process.exit(0);
      });
    };
    return LiveShell;
  }());
  module.exports = new LiveShell;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
