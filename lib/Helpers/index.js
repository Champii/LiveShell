// Generated by LiveScript 1.3.1
(function(){
  var fs, spawnSync, preludeLs, fs_, slice$ = [].slice, this$ = this;
  fs = require('fs');
  spawnSync = require('child_process').spawnSync;
  preludeLs = require('prelude-ls');
  import$(global, require('prelude-ls'));
  each(function(p){
    var bin;
    bin = last(split('/', p));
    if (bin in preludeLs) {
      bin += '_';
    }
    return module.exports[bin] = function(){
      var args, data;
      args = slice$.call(arguments);
      if (isType('Array', arguments[0])) {
        args = arguments[0];
      }
      data = spawnSync(bin, args).stdout.toString().split('\n');
      data.pop();
      return data;
    };
  })(
  filter(compose$(bind$(fs, 'statSync'), function(it){
    return it.isFile();
  }))(
  concatMap(function(p){
    return map(function(it){
      return p + '/' + it;
    })(
    fs.readdirSync(p));
  })(
  split(':')(
  process.env.PATH))));
  fs_ = Obj.map(function(it){
    if (isType('Function', it)) {
      return curry(it);
    } else {
      return it;
    }
  })(
  clone$(fs));
  exports.stringContains = curry$(function(pattern, string){
    return string.search(pattern) !== -1;
  });
  exports.cd = function(it){
    return process.chdir(it || '~');
  };
  exports.sizeof = compose$(fs.statSync, function(it){
    return it.size;
  });
  exports.isFile = compose$(fs.statSync, function(it){
    return it.isFile();
  });
  exports.isDir = compose$(fs.statSync, function(it){
    return it.isDirectory();
  });
  exports.grepFile = curry$((function(pattern, file){
    return filter(this$.stringContains(pattern))(
    exports.cat(file));
  }), true);
  exports.gitBranch = function(){
    return drop(2)(
    head(
    filter(this$.stringContains("\\* "))(
    exports.git('branch'))));
  };
  exports.pull = function(it){
    return exports.git(['pull', 'origin'].push(it || this$.gitBranch()));
  };
  exports.push = function(it){
    return exports.git(['push', 'origin'].push(it || this$.gitBranch()));
  };
  exports.commit = function(it){
    return exports.git(['commit', '-am'].push(it || 'Empty message'));
  };
  exports.lsPath = function(it){
    var path;
    path = it || exports.pwd();
    return map(function(it){
      var that;
      switch (that = path) {
      case '/':
        return that + it;
      default:
        return that + '/' + it;
      }
    })(
    exports.ls(path));
  };
  exports.fs = fs_;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
